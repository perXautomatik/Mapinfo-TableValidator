include "CommonLib\commonLib1.def"
Include "MapBasic.def"

Declare sub processor1_ValidatePathTable Declare function Do1_errorsINPathTable() as logical Declare function do1_selectFailuresFrompathTable as integer Declare sub processor2_ValidateTable Declare sub do1_rmNonOneAndInvalid() Declare sub Do2_runValidation() Declare sub Main Declare sub do2_loadPathArray()
global G_senastTid, G_Progress, G_starttime,G_ProgressRange as integer, paths() as string

Sub Main

    G_senastTid = 0 G_Progress = 0 G_starttime = timer() print "before"
	dim Do1_errorsINPathTable as logical
		,tempInteger as integer
		onError goto NoTable
			open table applicationdirectory$()+ "pathTable.tab"
			
			G_ProgressRange =  tableInfo("pathTable",TAB_INFO_NROWS)+2
			ProgressBar "1processor_ValidatePathTable...." & G_ProgressRange & " items" Calling processor1_ValidatePathTable	Range G_ProgressRange 	
			
			tempInteger	= do1_selectFailuresFrompathTable() 'any integer higher than zero means trur
			print "X" & tempInteger	
			Do1_errorsINPathTable = (0 <> tempInteger)
		onError goto 0

	end program

	 if(Do1_errorsINPathTable) then 
		G_ProgressRange =  tableInfo("NameNalias",TAB_INFO_NROWS)+3 print "inside"	& G_ProgressRange G_senastTid = 0 G_Progress = 0 G_starttime = timer() ProgressBar "2...." & G_ProgressRange & " items" 
		Calling processor2_ValidateTable	Range G_ProgressRange commit table PathTable 
	end if	
	print "done validation"

exit sub
	noTable:
		print error$()
		Do1_errorsINPathTable = true
end sub

function Do1_errorsINPathTable() as logical

end function

sub processor1_ValidatePathTable
	
	DO case G_Progress
		case 1
			Pack Table pathTable Data
			fetch first from pathTable
		case G_ProgressRange
		
			commit table NameNalias
			
			if(do1_selectFailuresFrompathTable() <> 0) then select * from NameNalias where left$(col1,len(col1)-4) = any(select col1 from pathTable) into success delete from success end if
		
			Commit table NameNalias
		
			Pack Table NameNalias Data
			
		case else 
			call do1_rmNonOneAndInvalid()
			
			fetch next from pathTable
	end case
	call increment(G_Progress,G_ProgressRange,G_starttime)    
exit sub

end sub

sub do1_rmNonOneAndInvalid()	
	dim testPath as string ,val1 as integer
		
	val1 = pathTable.col4
	testPath = pathTable.col2
	
	if(val1 <> 1) then
		select * from pathTable where Col4 <> 1 into ToDelete
		Delete from ToDelete
	else
		if(not(ValidateNClosePath(testPath))) then
			select * from pathTable where testPath = Col2 into ToDelete		
			Delete from ToDelete
		end if
	end if
	
End Sub

function do1_selectFailuresFrompathTable() as integer
		 
		select * from NameNalias where not(left$(col1,len(col1)-4) = any(select col1 from pathTable)) into faileNames
		select * from faileNames where not(col2 = any(select col1 from pathTable)) into failures

	do1_selectFailuresFrompathTable = tableInfo("failures",TAB_INFO_NROWS)
End function
		


sub do2_loadPathArray()
	open Table applicationdirectory$() & "NameNalias.TAB" select left$(Col1,len(Col1)-2),Col2 from PathsPriorityOrder where right$(col1,1) = "*" order by col2 into PrefixPaths
	open Table applicationdirectory$() & "PathsPriorityOrder.TAB" select right$(Col1,len(Col1)-1),Col2 from PathsPriorityOrder where left$(col1,1) = "*" order by col2 into PostfixPaths
	
	fetch first from PrefixPaths
	dim val1 as string ,i as integer
	i = 1
	DO UNtil EOT(PrefixPaths)
		val1 = PrefixPaths.col1
		
		fetch first from PostfixPaths
		DO UNtil EOT(PostfixPaths)
			redim paths(i) paths(i) = Val1 & PostfixPaths.col1
		  	i=i +1
		    fetch Next from PostfixPaths
		 loop
		 
	    fetch Next from PrefixPaths
	 loop
	
End Sub

sub Do2_runValidation() dim val1, testPath as string, i as integer val1 = NameNalias.fileName
	for i = 1 to ubound(paths) testPath = paths(i) & val1
		if (ValidateNClosePath(testPath)) then 
			val1 = iif(NameNalias.Alias <> "", NameNalias.Alias, left$(NameNalias.fileName, len(NameNalias.fileName) - 4))
			insert into pathTable(tablePath, tableName, static) values(testPath, val1, 1) print "found"
		goto found end
	if next print "not found"
exit sub found: 
End Sub



sub processor2_ValidateTable
	
	DO case G_Progress 
	case 1 call do2_loadPathArray()
	print Chr$(12) 'emptyScreen 
	case 2 dim tempstring as string tempstring = applicationDirectory$() + "pathTable.tab" onError goto tabex if not(ValidateNClosePath(tempstring)) then note "createintg pathTable" CREATE TABLE PathTABLE (tableName Char(40),tablePath Char(256),alternative Char(256),static Integer) File tempstring end if onError goto 0 print 2 fetch first from NameNalias
		
		case G_ProgressRange
		print "end"
			commit table pathTable
			if(do1_selectFailuresFrompathTable() <> 0) then
			 dim failerues(),failedTables as string call columnAsStringArray("Failures","col1",failerues) failedTables = StringArrayAsString(failerues) goto CouldntOpenEveryTableError end if
		case else 
		print G_Progress
			call Do2_runValidation()
			fetch Next from NameNalias
	end case
	call increment(G_Progress,G_ProgressRange,G_starttime)

exit sub

	CouldntOpenEveryTableError:
		note "CouldntOpenEveryTableERROR " & failedTables
		end program
	
	tabex:
		print error$()
		resume next
end sub
